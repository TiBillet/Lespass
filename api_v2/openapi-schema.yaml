openapi: 3.0.3
info:
  title: TiBillet API v2
  version: "2.0.0"
  description: |
    Semantic, schema.org-based API.
servers:
  - url: https://{tenant}.{domain}
    variables:
      tenant:
        default: lespass
      domain:
        default: tibillet.localhost
paths:
  /api/v2/events/:
    get:
      operationId: listEvents
      summary: List all published Events
      tags: [Event]
      security:
        - ApiKeyAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Event'
    post:
      operationId: createEvent
      summary: Create an Event (schema.org/Event)
      tags: [Event]
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
            examples:
              musicCreate:
                summary: Create a music event
                value:
                  "@context": "https://schema.org"
                  "@type": "MusicEvent"
                  name: API v2 â€” Test create
                  startDate: "2025-12-20T19:00:00Z"
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
  /api/v2/events/{uuid}/:
    get:
      operationId: retrieveEvent
      summary: Retrieve a single Event
      tags: [Event]
      security:
        - ApiKeyAuth: []
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
    delete:
      operationId: deleteEvent
      summary: Delete an Event by UUID
      tags: [Event]
      security:
        - ApiKeyAuth: []
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Deleted
  /api/v2/events/{uuid}/link-address/:
    post:
      operationId: linkEventAddress
      summary: Link a PostalAddress to an Event (by id or schema.org payload)
      tags: [Event]
      security:
        - ApiKeyAuth: []
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    postalAddressId:
                      type: integer
                - $ref: '#/components/schemas/PostalAddress'
      responses:
        '200':
          description: Updated Event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
  /api/v2/postal-addresses/:
    get:
      operationId: listPostalAddresses
      summary: List PostalAddresses
      tags: [PostalAddress]
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/PostalAddress'
    post:
      operationId: createPostalAddress
      summary: Create PostalAddress (schema.org)
      tags: [PostalAddress]
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostalAddress'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostalAddress'
  /api/v2/postal-addresses/{id}/:
    get:
      operationId: retrievePostalAddress
      summary: Retrieve PostalAddress by id
      tags: [PostalAddress]
      security:
        - ApiKeyAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostalAddress'
    delete:
      operationId: deletePostalAddress
      summary: Delete PostalAddress by id
      tags: [PostalAddress]
      security:
        - ApiKeyAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Deleted
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: Authorization
      bearerFormat: Api-Key
      description: |
        Pass your key as `Authorization: Api-Key <key>`.
  schemas:
    PostalAddress:
      type: object
      properties:
        '@type':
          type: string
          example: PostalAddress
        streetAddress:
          type: string
        addressLocality:
          type: string
        addressRegion:
          type: string
        postalCode:
          type: string
        addressCountry:
          type: string
        geo:
          type: object
          properties:
            '@type':
              type: string
              example: GeoCoordinates
            latitude:
              type: number
              format: float
            longitude:
              type: number
              format: float
    Place:
      type: object
      properties:
        '@type':
          type: string
          example: Place
        address:
          $ref: '#/components/schemas/PostalAddress'
    Event:
      type: object
      description: schema.org/Event JSON-LD representation
      properties:
        '@context':
          type: string
          example: https://schema.org
        '@type':
          type: string
          example: Event
        identifier:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
          nullable: true
        location:
          $ref: '#/components/schemas/Place'
        url:
          type: string
          format: uri
        additionalType:
          type: string
          description: Human-readable category label (schema.org/Thing.additionalType). Maps to internal category.
        superEvent:
          description: Parent event. Required when the resolved category is ACTION (Volunteering).
          oneOf:
            - type: string
              format: uuid
              description: UUID of the parent Event (recommended for create requests)
            - type: object
              properties:
                '@type':
                  type: string
                  example: Event
                identifier:
                  type: string
                  format: uuid
                name:
                  type: string
        maximumAttendeeCapacity:
          type: integer
        disambiguatingDescription:
          type: string
        eventStatus:
          type: string
          description: e.g. https://schema.org/EventScheduled or https://schema.org/EventCancelled
        audience:
          type: object
          properties:
            '@type':
              type: string
              example: Audience
            audienceType:
              type: string
              example: private
        keywords:
          type: array
          items:
            type: string
        sameAs:
          type: string
          format: uri
        offers:
          type: object
          properties:
            '@type':
              type: string
              example: Offer
            eligibleQuantity:
              type: object
              properties:
                '@type':
                  type: string
                  example: QuantitativeValue
                maxValue:
                  type: integer
            returnPolicy:
              type: object
              properties:
                '@type':
                  type: string
                  example: MerchantReturnPolicy
                merchantReturnDays:
                  type: integer
        additionalProperty:
          type: array
          items:
            type: object
            properties:
              '@type':
                type: string
                example: PropertyValue
              name:
                type: string
                example: optionsRadio
              value:
                oneOf:
                  - type: array
                    items:
                      type: string
                  - type: string
